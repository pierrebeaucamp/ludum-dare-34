// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };                  
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var map = function (dict) {
      return dict.map;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["map"] = map;
  exports["otherwise"] = otherwise;
  exports["functorArray"] = functorArray;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */

  // module Control.Monad.Eff.WebGL


      "use strict";

      exports.runWebGl_ = function (f) {
        return f;
    };
 
})(PS["Control.Monad.Eff.WebGL"] = PS["Control.Monad.Eff.WebGL"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.WebGL"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["runWebGl_"] = $foreign.runWebGl_;;
 
})(PS["Control.Monad.Eff.WebGL"] = PS["Control.Monad.Eff.WebGL"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["head"] = head;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  exports["runFn4"] = $foreign.runFn4;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.orImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int.Bits"]; 
  var $dot$bar$dot = $foreign.orImpl;
  exports[".|."] = $dot$bar$dot;;
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* global exports */
  "use strict";            

  exports.tan = Math.tan;      

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["tan"] = $foreign.tan;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */

  // module Extensions


      "use strict";

      exports.fail = function(s) {
        throw new Error(s);
      }
 
})(PS["Extensions"] = PS["Extensions"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Extensions"];
  var Prelude = PS["Prelude"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var $$Math = PS["Math"];
  exports["fail"] = $foreign.fail;;
 
})(PS["Extensions"] = PS["Extensions"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_TypeNat = PS["Data.TypeNat"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Type_Proxy = PS["Type.Proxy"];
  var Extensions = PS["Extensions"];
  var toArray = function (_2) {
      return _2;
  };
  exports["toArray"] = toArray;;
 
})(PS["Data.Matrix"] = PS["Data.Matrix"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Vector = PS["Data.Vector"];
  var Data_TypeNat = PS["Data.TypeNat"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Extensions = PS["Extensions"];
  var vec3 = function (x) {
      return function (y) {
          return function (z) {
              return [ x, y, z ];
          };
      };
  };
  exports["vec3"] = vec3;;
 
})(PS["Data.Vector3"] = PS["Data.Vector3"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_TypeNat = PS["Data.TypeNat"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Vector3 = PS["Data.Vector3"];
  var Data_Vector4 = PS["Data.Vector4"];
  var Data_Vector = PS["Data.Vector"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Extensions = PS["Extensions"];     
  var translate3 = function (x) {
      return function (y) {
          return function (z) {
              return function (_13) {
                  if (_13.length === 16) {
                      return [ _13[0], _13[1], _13[2], _13[3], _13[4], _13[5], _13[6], _13[7], _13[8], _13[9], _13[10], _13[11], _13[0] * x + _13[4] * y + _13[8] * z + _13[12], _13[1] * x + _13[5] * y + _13[9] * z + _13[13], _13[2] * x + _13[6] * y + _13[10] * z + _13[14], _13[3] * x + _13[7] * y + _13[11] * z + _13[15] ];
                  };
                  return Extensions.fail("Matrix3>>translate3: Impossible!");
              };
          };
      };
  };
  var translate = function (_14) {
      return function (m) {
          if (_14.length === 3) {
              return translate3(_14[0])(_14[1])(_14[2])(m);
          };
          return Extensions.fail("Matrix3>>translate: Impossible!");
      };
  };
  var makeFrustum = function (left) {
      return function (right) {
          return function (bottom) {
              return function (top) {
                  return function (znear) {
                      return function (zfar) {
                          var z = (right + left) / (right - left);
                          var y = (2.0 * znear) / (top - bottom);
                          var x = (2.0 * znear) / (right - left);
                          var d = (-2.0 * zfar * znear) / (zfar - znear);
                          var c = -(zfar + znear) / (zfar - znear);
                          var b = (top + bottom) / (top - bottom);
                          return [ (2.0 * znear) / (right - left), 0.0, 0.0, 0.0, 0.0, (2.0 * znear) / (top - bottom), 0.0, 0.0, (right + left) / (right - left), (top + bottom) / (top - bottom), -(zfar + znear) / (zfar - znear), -1.0, 0.0, 0.0, (-2.0 * zfar * znear) / (zfar - znear), 0.0 ];
                      };
                  };
              };
          };
      };
  };
  var makePerspective = function (fovy) {
      return function (aspect) {
          return function (znear) {
              return function (zfar) {
                  var ymax = znear * $$Math.tan((fovy * $$Math.pi) / 360.0);
                  var ymin = -ymax;
                  var xmin = ymin * aspect;
                  var xmax = ymax * aspect;
                  return makeFrustum(xmin)(xmax)(ymin)(ymax)(znear)(zfar);
              };
          };
      };
  };
  var identity = [ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 ];
  exports["translate"] = translate;
  exports["translate3"] = translate3;
  exports["makePerspective"] = makePerspective;
  exports["makeFrustum"] = makeFrustum;
  exports["identity"] = identity;;
 
})(PS["Data.Matrix4"] = PS["Data.Matrix4"] || {});
(function(exports) {
  /* global exports */

  // module Data.TypedArray


      "use strict";     

      exports.asFloat32Array = function (array)
          {var res = new Float32Array (array);
           return res;};
 
})(PS["Data.TypedArray"] = PS["Data.TypedArray"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.TypedArray"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  exports["asFloat32Array"] = $foreign.asFloat32Array;;
 
})(PS["Data.TypedArray"] = PS["Data.TypedArray"] || {});
(function(exports) {
  /* global exports */

  // module Graphics.WebGL

      "use strict";

      exports.shaderBindings_ = function (program) {
            return function() {
              var bindings = {};
              var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
              for (var i = 0; i < numUniforms; i += 1) {
                  var uniform = gl.getActiveUniform(program, i);
                  var uniformLocation = gl.getUniformLocation(program, uniform.name);
                  var newUniform = {};
                  newUniform.uLocation=uniformLocation;
                  newUniform.uName=uniform.name;
                  newUniform.uType=uniform.type;
                  bindings[uniform.name]=newUniform;
                }
              var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
              for (var i2 = 0; i2 < numAttributes; i2 += 1) {
                  var attribute = gl.getActiveAttrib(program, i2);
                  var attribLocation = gl.getAttribLocation(program, attribute.name);
                  gl.enableVertexAttribArray(attribLocation);
                  var newAttr = {};
                  newAttr.aLocation=attribLocation;
                  newAttr.aName=attribute.name;
                  newAttr.aItemType=attribute.type;
                  switch (attribute.type) {
                    case gl.FLOAT_VEC2:
                      newAttr.aItemSize=2;
                      break;
                    case gl.FLOAT_VEC3:
                      newAttr.aItemSize=3;
                      break;
                    case gl.FLOAT_VEC4:
                      newAttr.aItemSize=4;
                      break;
                    default:
                      LOG("Unsupported attribute type: " + attribute.type);
                      newAttr.aItemSize=1;
                      break;
                  }
                  bindings[attribute.name]=newAttr;
              }
              return bindings;
          };};


      exports.initGL_ = function (canvasId, attr) {
              return function() {
                var canvas = document.getElementById(canvasId);
                try {
                  gl = canvas.getContext("webgl", attr) || canvas.getContext("experimental-webgl", attr);
                }
                catch(e) {return false;}
                if (!gl)
                {
                  gl = null;
                  return false;
                }
                return true;
            };
        };

          exports.getCanvasWidth_ = function(canvasId) {
            return function() {
              var canvas = document.getElementById(canvasId);
              return canvas.width;
              };
          };

          exports.getCanvasHeight_ = function(canvasId) {
            return function() {
              var canvas = document.getElementById(canvasId);
              return canvas.height;
              };
          };

        exports.bufferData__ = function(target,data,usage)
           {return function()
            {gl.bufferData(target,data,usage);};};    
 
})(PS["Graphics.WebGL"] = PS["Graphics.WebGL"] || {});
(function(exports) {
  // Auto generated: don't change manually, use purescript-webgl-generator to modify!!
  /* global exports */

  // module Graphics.WebGLRaw

    "use strict";
    
      exports.attachShader_ = function (program,shader)
      {return function ()
     {gl.attachShader(program,shader);}
     ;}
    
      exports.bindBuffer_ = function (target,buffer)
      {return function ()
     {gl.bindBuffer(target,buffer);}
     ;}
    
      exports.clear_ = function (mask)
      {return function ()
     {gl.clear(mask);}
     ;}
    
      exports.clearColor_ = function (red,green,blue,alpha)
      {return function ()
     {gl.clearColor(red,green,blue,alpha);}
     ;}
    
      exports.compileShader_ = function (shader)
      {return function ()
     {gl.compileShader(shader);}
     ;}
    
      exports.createBuffer_ = function () 
      {return function ()
     {var res = gl.createBuffer();
      if (res === undefined){
        throw "Undefined in  createBuffer"};
      return res;}
     ;}
    
      exports.createProgram_ = function () 
      {return function ()
     {var res = gl.createProgram();
      if (res === undefined){
        throw "Undefined in  createProgram"};
      return res;}
     ;}
    
      exports.createShader_ = function (type)
      {return function ()
     {var res = gl.createShader(type);
      if (res === undefined){
        throw "Undefined in  createShader"};
      return res;}
     ;}
    
      exports.drawArrays_ = function (mode,first,count)
      {return function ()
     {gl.drawArrays(mode,first,count);}
     ;}
    
      exports.enable_ = function (cap)
      {return function ()
     {gl.enable(cap);}
     ;}
    
      exports.getProgramParameter_ = function (program,pname)
      {return function ()
     {var res = gl.getProgramParameter(program,pname);
      if (res === undefined){
        throw "Undefined in  getProgramParameter"};
      return res;}
     ;}
    
      exports.getShaderParameter_ = function (shader,pname)
      {return function ()
     {var res = gl.getShaderParameter(shader,pname);
      if (res === undefined){
        throw "Undefined in  getShaderParameter"};
      return res;}
     ;}
    
      exports.getShaderInfoLog_ = function (shader)
      {return function ()
     {var res = gl.getShaderInfoLog(shader);
      if (res === undefined){
        throw "Undefined in  getShaderInfoLog"};
      return res;}
     ;}
    
      exports.linkProgram_ = function (program)
      {return function ()
     {gl.linkProgram(program);}
     ;}
    
      exports.shaderSource_ = function (shader,source)
      {return function ()
     {gl.shaderSource(shader,source);}
     ;}
    
      exports.uniform1f_ = function (location,x)
      {return function ()
     {gl.uniform1f(location,x);}
     ;}
    
      exports.uniform2fv_ = function (location,v)
      {return function ()
     {gl.uniform2fv(location,v);}
     ;}
    
      exports.uniform3fv_ = function (location,v)
      {return function ()
     {gl.uniform3fv(location,v);}
     ;}
    
      exports.uniform4fv_ = function (location,v)
      {return function ()
     {gl.uniform4fv(location,v);}
     ;}
    
      exports.uniformMatrix2fv_ = function (location,transpose,value)
      {return function ()
     {gl.uniformMatrix2fv(location,transpose,value);}
     ;}
    
      exports.uniformMatrix3fv_ = function (location,transpose,value)
      {return function ()
     {gl.uniformMatrix3fv(location,transpose,value);}
     ;}
    
      exports.uniformMatrix4fv_ = function (location,transpose,value)
      {return function ()
     {gl.uniformMatrix4fv(location,transpose,value);}
     ;}
    
      exports.useProgram_ = function (program)
      {return function ()
     {gl.useProgram(program);}
     ;}
    
      exports.vertexAttribPointer_ = function (indx,size,type,normalized,stride,offset)
      {return function ()
     {gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);}
     ;}
    
      exports.viewport_ = function (x,y,width,height)
      {return function ()
     {gl.viewport(x,y,width,height);}
     ;}
    
 
})(PS["Graphics.WebGLRaw"] = PS["Graphics.WebGLRaw"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.WebGLRaw"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_WebGL = PS["Control.Monad.Eff.WebGL"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var _VERTEX_SHADER = 35633;  
  var _TRIANGLE_STRIP = 5;
  var _TRIANGLE_FAN = 6;
  var _TRIANGLES = 4;             
  var _STENCIL_BUFFER_BIT = 1024; 
  var _STATIC_DRAW = 35044;         
  var _SCISSOR_TEST = 3089;         
  var _POLYGON_OFFSET_FILL = 32823;  
  var _POINTS = 0;       
  var _LINK_STATUS = 35714;
  var _LINE_STRIP = 3;
  var _LINE_LOOP = 2;
  var _LINES = 1;          
  var _FRAGMENT_SHADER = 35632;
  var _FLOAT_VEC4 = 35666;
  var _FLOAT_VEC3 = 35665;
  var _FLOAT_VEC2 = 35664;
  var _FLOAT_MAT4 = 35676;
  var _FLOAT_MAT3 = 35675;
  var _FLOAT_MAT2 = 35674;
  var _FLOAT = 5126;          
  var _DEPTH_TEST = 2929;       
  var _DEPTH_BUFFER_BIT = 256;
  var _CULL_FACE = 2884;                  
  var _COMPILE_STATUS = 35713;  
  var _COLOR_BUFFER_BIT = 16384;
  var _BLEND = 3042;                
  var _ARRAY_BUFFER = 34962;
  exports["_COMPILE_STATUS"] = _COMPILE_STATUS;
  exports["_FLOAT_MAT4"] = _FLOAT_MAT4;
  exports["_FLOAT_MAT3"] = _FLOAT_MAT3;
  exports["_FLOAT_MAT2"] = _FLOAT_MAT2;
  exports["_FLOAT_VEC4"] = _FLOAT_VEC4;
  exports["_FLOAT_VEC3"] = _FLOAT_VEC3;
  exports["_FLOAT_VEC2"] = _FLOAT_VEC2;
  exports["_LINK_STATUS"] = _LINK_STATUS;
  exports["_VERTEX_SHADER"] = _VERTEX_SHADER;
  exports["_FRAGMENT_SHADER"] = _FRAGMENT_SHADER;
  exports["_FLOAT"] = _FLOAT;
  exports["_POLYGON_OFFSET_FILL"] = _POLYGON_OFFSET_FILL;
  exports["_SCISSOR_TEST"] = _SCISSOR_TEST;
  exports["_DEPTH_TEST"] = _DEPTH_TEST;
  exports["_BLEND"] = _BLEND;
  exports["_CULL_FACE"] = _CULL_FACE;
  exports["_STATIC_DRAW"] = _STATIC_DRAW;
  exports["_ARRAY_BUFFER"] = _ARRAY_BUFFER;
  exports["_TRIANGLE_FAN"] = _TRIANGLE_FAN;
  exports["_TRIANGLE_STRIP"] = _TRIANGLE_STRIP;
  exports["_TRIANGLES"] = _TRIANGLES;
  exports["_LINE_STRIP"] = _LINE_STRIP;
  exports["_LINE_LOOP"] = _LINE_LOOP;
  exports["_LINES"] = _LINES;
  exports["_POINTS"] = _POINTS;
  exports["_COLOR_BUFFER_BIT"] = _COLOR_BUFFER_BIT;
  exports["_STENCIL_BUFFER_BIT"] = _STENCIL_BUFFER_BIT;
  exports["_DEPTH_BUFFER_BIT"] = _DEPTH_BUFFER_BIT;
  exports["viewport_"] = $foreign.viewport_;
  exports["vertexAttribPointer_"] = $foreign.vertexAttribPointer_;
  exports["useProgram_"] = $foreign.useProgram_;
  exports["uniformMatrix4fv_"] = $foreign.uniformMatrix4fv_;
  exports["uniformMatrix3fv_"] = $foreign.uniformMatrix3fv_;
  exports["uniformMatrix2fv_"] = $foreign.uniformMatrix2fv_;
  exports["uniform4fv_"] = $foreign.uniform4fv_;
  exports["uniform3fv_"] = $foreign.uniform3fv_;
  exports["uniform2fv_"] = $foreign.uniform2fv_;
  exports["uniform1f_"] = $foreign.uniform1f_;
  exports["shaderSource_"] = $foreign.shaderSource_;
  exports["linkProgram_"] = $foreign.linkProgram_;
  exports["getShaderInfoLog_"] = $foreign.getShaderInfoLog_;
  exports["getShaderParameter_"] = $foreign.getShaderParameter_;
  exports["getProgramParameter_"] = $foreign.getProgramParameter_;
  exports["enable_"] = $foreign.enable_;
  exports["drawArrays_"] = $foreign.drawArrays_;
  exports["createShader_"] = $foreign.createShader_;
  exports["createProgram_"] = $foreign.createProgram_;
  exports["createBuffer_"] = $foreign.createBuffer_;
  exports["compileShader_"] = $foreign.compileShader_;
  exports["clearColor_"] = $foreign.clearColor_;
  exports["clear_"] = $foreign.clear_;
  exports["bindBuffer_"] = $foreign.bindBuffer_;
  exports["attachShader_"] = $foreign.attachShader_;;
 
})(PS["Graphics.WebGLRaw"] = PS["Graphics.WebGLRaw"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.WebGL"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_WebGL = PS["Control.Monad.Eff.WebGL"];
  var Graphics_WebGLRaw = PS["Graphics.WebGLRaw"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_TypedArray = PS["Data.TypedArray"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Function = PS["Data.Function"];
  var Extensions = PS["Extensions"];
  var Shaders = (function () {
      function Shaders(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Shaders.create = function (value0) {
          return function (value1) {
              return new Shaders(value0, value1);
          };
      };
      return Shaders;
  })();
  var FragmentShader = (function () {
      function FragmentShader() {

      };
      FragmentShader.value = new FragmentShader();
      return FragmentShader;
  })();
  var VertexShader = (function () {
      function VertexShader() {

      };
      VertexShader.value = new VertexShader();
      return VertexShader;
  })();
  var POINTS = (function () {
      function POINTS() {

      };
      POINTS.value = new POINTS();
      return POINTS;
  })();
  var LINES = (function () {
      function LINES() {

      };
      LINES.value = new LINES();
      return LINES;
  })();
  var LINE_STRIP = (function () {
      function LINE_STRIP() {

      };
      LINE_STRIP.value = new LINE_STRIP();
      return LINE_STRIP;
  })();
  var LINE_LOOP = (function () {
      function LINE_LOOP() {

      };
      LINE_LOOP.value = new LINE_LOOP();
      return LINE_LOOP;
  })();
  var TRIANGLES = (function () {
      function TRIANGLES() {

      };
      TRIANGLES.value = new TRIANGLES();
      return TRIANGLES;
  })();
  var TRIANGLE_STRIP = (function () {
      function TRIANGLE_STRIP() {

      };
      TRIANGLE_STRIP.value = new TRIANGLE_STRIP();
      return TRIANGLE_STRIP;
  })();
  var TRIANGLE_FAN = (function () {
      function TRIANGLE_FAN() {

      };
      TRIANGLE_FAN.value = new TRIANGLE_FAN();
      return TRIANGLE_FAN;
  })();
  var DEPTH_BUFFER_BIT = (function () {
      function DEPTH_BUFFER_BIT() {

      };
      DEPTH_BUFFER_BIT.value = new DEPTH_BUFFER_BIT();
      return DEPTH_BUFFER_BIT;
  })();
  var STENCIL_BUFFER_BIT = (function () {
      function STENCIL_BUFFER_BIT() {

      };
      STENCIL_BUFFER_BIT.value = new STENCIL_BUFFER_BIT();
      return STENCIL_BUFFER_BIT;
  })();
  var COLOR_BUFFER_BIT = (function () {
      function COLOR_BUFFER_BIT() {

      };
      COLOR_BUFFER_BIT.value = new COLOR_BUFFER_BIT();
      return COLOR_BUFFER_BIT;
  })();
  var BLEND = (function () {
      function BLEND() {

      };
      BLEND.value = new BLEND();
      return BLEND;
  })();
  var DEPTH_TEST = (function () {
      function DEPTH_TEST() {

      };
      DEPTH_TEST.value = new DEPTH_TEST();
      return DEPTH_TEST;
  })();
  var CULL_FACE = (function () {
      function CULL_FACE() {

      };
      CULL_FACE.value = new CULL_FACE();
      return CULL_FACE;
  })();
  var POLYGON_OFFSET_FILL = (function () {
      function POLYGON_OFFSET_FILL() {

      };
      POLYGON_OFFSET_FILL.value = new POLYGON_OFFSET_FILL();
      return POLYGON_OFFSET_FILL;
  })();
  var SCISSOR_TEST = (function () {
      function SCISSOR_TEST() {

      };
      SCISSOR_TEST.value = new SCISSOR_TEST();
      return SCISSOR_TEST;
  })();
  var viewport = Data_Function.runFn4(Graphics_WebGLRaw.viewport_);
  var vertexPointer = function (_18) {
      return Graphics_WebGLRaw.vertexAttribPointer_(_18.aLocation, _18.aItemSize, Graphics_WebGLRaw._FLOAT, false, 0, 0);
  };                                                                                
  var modeToConst = function (_23) {
      if (_23 instanceof POINTS) {
          return Graphics_WebGLRaw._POINTS;
      };
      if (_23 instanceof LINES) {
          return Graphics_WebGLRaw._LINES;
      };
      if (_23 instanceof LINE_STRIP) {
          return Graphics_WebGLRaw._LINE_STRIP;
      };
      if (_23 instanceof LINE_LOOP) {
          return Graphics_WebGLRaw._LINE_LOOP;
      };
      if (_23 instanceof TRIANGLES) {
          return Graphics_WebGLRaw._TRIANGLES;
      };
      if (_23 instanceof TRIANGLE_STRIP) {
          return Graphics_WebGLRaw._TRIANGLE_STRIP;
      };
      if (_23 instanceof TRIANGLE_FAN) {
          return Graphics_WebGLRaw._TRIANGLE_FAN;
      };
      throw new Error("Failed pattern match at Graphics.WebGL line 476, column 1 - line 477, column 1: " + [ _23.constructor.name ]);
  };
  var maskToConst = function (_22) {
      if (_22 instanceof DEPTH_BUFFER_BIT) {
          return Graphics_WebGLRaw._DEPTH_BUFFER_BIT;
      };
      if (_22 instanceof STENCIL_BUFFER_BIT) {
          return Graphics_WebGLRaw._STENCIL_BUFFER_BIT;
      };
      if (_22 instanceof COLOR_BUFFER_BIT) {
          return Graphics_WebGLRaw._COLOR_BUFFER_BIT;
      };
      throw new Error("Failed pattern match at Graphics.WebGL line 455, column 1 - line 456, column 1: " + [ _22.constructor.name ]);
  };
  var makeShader = function (shaderType) {
      return function (shaderSrc) {
          var shaderTypeConst = (function () {
              if (shaderType instanceof FragmentShader) {
                  return Graphics_WebGLRaw._FRAGMENT_SHADER;
              };
              if (shaderType instanceof VertexShader) {
                  return Graphics_WebGLRaw._VERTEX_SHADER;
              };
              throw new Error("Failed pattern match at Graphics.WebGL line 399, column 7 - line 402, column 3: " + [ shaderType.constructor.name ]);
          })();
          return function __do() {
              var _10 = Graphics_WebGLRaw.createShader_(shaderTypeConst)();
              Graphics_WebGLRaw.shaderSource_(_10, shaderSrc)();
              Graphics_WebGLRaw.compileShader_(_10)();
              var _9 = Graphics_WebGLRaw.getShaderParameter_(_10, Graphics_WebGLRaw._COMPILE_STATUS)();
              return (function () {
                  if (_9) {
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Data_Either.Left(_10));
                  };
                  if (!_9) {
                      return function __do() {
                          var _8 = Graphics_WebGLRaw.getShaderInfoLog_(_10)();
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Data_Either.Right(_8))();
                      };
                  };
                  throw new Error("Failed pattern match at Graphics.WebGL line 397, column 1 - line 398, column 1: " + [ _9.constructor.name ]);
              })()();
          };
      };
  };
  var makeBufferFloat$prime = function (vertices) {
      return function (flag) {
          return function __do() {
              var _6 = Graphics_WebGLRaw.createBuffer_()();
              Graphics_WebGLRaw.bindBuffer_(Graphics_WebGLRaw._ARRAY_BUFFER, _6)();
              var typedArray = Data_TypedArray.asFloat32Array(vertices);
              $foreign.bufferData__(Graphics_WebGLRaw._ARRAY_BUFFER, typedArray, flag)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)({
                  webGLBuffer: _6, 
                  bufferType: Graphics_WebGLRaw._ARRAY_BUFFER, 
                  bufferSize: Data_Array.length(vertices)
              })();
          };
      };
  };
  var makeBufferFloat = function (vertices) {
      return makeBufferFloat$prime(vertices)(Graphics_WebGLRaw._STATIC_DRAW);
  };                                                     
  var initShaders = function (fragmentShader) {
      return function (vertexShader) {
          return function __do() {
              var _12 = Graphics_WebGLRaw.createProgram_()();
              Graphics_WebGLRaw.attachShader_(_12, vertexShader)();
              Graphics_WebGLRaw.attachShader_(_12, fragmentShader)();
              Graphics_WebGLRaw.linkProgram_(_12)();
              var _11 = Graphics_WebGLRaw.getProgramParameter_(_12, Graphics_WebGLRaw._LINK_STATUS)();
              return (function () {
                  if (_11) {
                      return function __do() {
                          Graphics_WebGLRaw.useProgram_(_12)();
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Data_Maybe.Just(_12))();
                      };
                  };
                  if (!_11) {
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value);
                  };
                  throw new Error("Failed pattern match at Graphics.WebGL line 412, column 1 - line 413, column 1: " + [ _11.constructor.name ]);
              })()();
          };
      };
  };
  var withShaders = function (_13) {
      return function (failure) {
          return function (success) {
              return function __do() {
                  var _5 = makeShader(FragmentShader.value)(_13.value0)();
                  return (function () {
                      if (_5 instanceof Data_Either.Right) {
                          return failure("Can't compile fragment shader: " + _5.value0);
                      };
                      if (_5 instanceof Data_Either.Left) {
                          return function __do() {
                              var _4 = makeShader(VertexShader.value)(_13.value1)();
                              return (function () {
                                  if (_4 instanceof Data_Either.Right) {
                                      return failure("Can't compile vertex shader: " + _4.value0);
                                  };
                                  if (_4 instanceof Data_Either.Left) {
                                      return function __do() {
                                          var _3 = initShaders(_5.value0)(_4.value0)();
                                          return (function () {
                                              if (_3 instanceof Data_Maybe.Nothing) {
                                                  return failure("Can't init shaders");
                                              };
                                              if (_3 instanceof Data_Maybe.Just) {
                                                  return function __do() {
                                                      var _2 = $foreign.shaderBindings_(_3.value0)();
                                                      return success((function () {
                                                          var _57 = {};
                                                          for (var _58 in _2) {
                                                              if (_2.hasOwnProperty(_58)) {
                                                                  _57[_58] = _2[_58];
                                                              };
                                                          };
                                                          _57.webGLProgram = _3.value0;
                                                          return _57;
                                                      })())();
                                                  };
                                              };
                                              throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ _3.constructor.name ]);
                                          })()();
                                      };
                                  };
                                  throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ _4.constructor.name ]);
                              })()();
                          };
                      };
                      throw new Error("Failed pattern match at Graphics.WebGL line 190, column 1 - line 192, column 1: " + [ _5.constructor.name ]);
                  })()();
              };
          };
      };
  };
  var getCanvasWidth = function (context) {
      return $foreign.getCanvasWidth_(context.canvasName);
  };
  var getCanvasHeight = function (context) {
      return $foreign.getCanvasHeight_(context.canvasName);
  };
  var defContextAttributes = {
      alpha: true, 
      depth: true, 
      stencil: false, 
      antialias: true, 
      premultipliedAlpha: true, 
      preserveDrawingBuffer: false, 
      preferLowPowerToHighPerformance: false, 
      failIfMajorPerformanceCaveat: false
  };
  var runWebGL = function (canvasId) {
      return function (failure) {
          return function (success) {
              var makeContext = {
                  canvasName: canvasId
              };
              return function __do() {
                  var _1 = $foreign.initGL_(canvasId, defContextAttributes)();
                  return (function () {
                      if (_1) {
                          return Control_Monad_Eff_WebGL.runWebGl_(success(makeContext));
                      };
                      if (!_1) {
                          return failure("Unable to initialize WebGL. Your browser may not support it.");
                      };
                      throw new Error("Failed pattern match at Graphics.WebGL line 149, column 1 - line 150, column 1: " + [ _1.constructor.name ]);
                  })()();
              };
          };
      };
  };                                                                   
  var clearColor = Data_Function.runFn4(Graphics_WebGLRaw.clearColor_);
  var clear = function (masks) {
      return Graphics_WebGLRaw.clear_(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Int_Bits[".|."])(0)(Prelude.map(Prelude.functorArray)(maskToConst)(masks)));
  };
  var capacityToConst = function (_21) {
      if (_21 instanceof BLEND) {
          return Graphics_WebGLRaw._BLEND;
      };
      if (_21 instanceof DEPTH_TEST) {
          return Graphics_WebGLRaw._DEPTH_TEST;
      };
      if (_21 instanceof CULL_FACE) {
          return Graphics_WebGLRaw._CULL_FACE;
      };
      if (_21 instanceof POLYGON_OFFSET_FILL) {
          return Graphics_WebGLRaw._POLYGON_OFFSET_FILL;
      };
      if (_21 instanceof SCISSOR_TEST) {
          return Graphics_WebGLRaw._SCISSOR_TEST;
      };
      throw new Error("Failed pattern match at Graphics.WebGL line 440, column 1 - line 441, column 1: " + [ _21.constructor.name ]);
  };
  var enable = function (_81) {
      return Graphics_WebGLRaw.enable_(capacityToConst(_81));
  };                                                                   
  var bindBufAndSetVertexAttr = function (buffer) {
      return function (attr) {
          return function __do() {
              Graphics_WebGLRaw.bindBuffer_(buffer.bufferType, buffer.webGLBuffer)();
              return vertexPointer(attr)();
          };
      };
  };
  var drawArr = function (mode) {
      return function (buffer) {
          return function (_17) {
              return function __do() {
                  bindBufAndSetVertexAttr(buffer)(_17)();
                  return Graphics_WebGLRaw.drawArrays_(modeToConst(mode), 0, buffer.bufferSize / _17.aItemSize | 0)();
              };
          };
      };
  };
  var asArrayBuffer = Data_TypedArray.asFloat32Array;
  var setUniformFloats = function (_14) {
      return function (value) {
          if (_14.uType === Graphics_WebGLRaw._FLOAT) {
              return Graphics_WebGLRaw.uniform1f_(_14.uLocation, Data_Array_Unsafe.head(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_MAT4) {
              return Graphics_WebGLRaw.uniformMatrix4fv_(_14.uLocation, false, asArrayBuffer(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_MAT3) {
              return Graphics_WebGLRaw.uniformMatrix3fv_(_14.uLocation, false, asArrayBuffer(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_MAT2) {
              return Graphics_WebGLRaw.uniformMatrix2fv_(_14.uLocation, false, asArrayBuffer(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_VEC4) {
              return Graphics_WebGLRaw.uniform4fv_(_14.uLocation, asArrayBuffer(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_VEC3) {
              return Graphics_WebGLRaw.uniform3fv_(_14.uLocation, asArrayBuffer(value));
          };
          if (_14.uType === Graphics_WebGLRaw._FLOAT_VEC2) {
              return Graphics_WebGLRaw.uniform2fv_(_14.uLocation, asArrayBuffer(value));
          };
          if (Prelude.otherwise) {
              return Extensions.fail("WebGL>>setUniformFloats: Called for non float uniform!");
          };
          throw new Error("Failed pattern match at Graphics.WebGL line 265, column 1 - line 266, column 1: " + [ _14.constructor.name, value.constructor.name ]);
      };
  };
  exports["BLEND"] = BLEND;
  exports["DEPTH_TEST"] = DEPTH_TEST;
  exports["CULL_FACE"] = CULL_FACE;
  exports["POLYGON_OFFSET_FILL"] = POLYGON_OFFSET_FILL;
  exports["SCISSOR_TEST"] = SCISSOR_TEST;
  exports["POINTS"] = POINTS;
  exports["LINES"] = LINES;
  exports["LINE_STRIP"] = LINE_STRIP;
  exports["LINE_LOOP"] = LINE_LOOP;
  exports["TRIANGLES"] = TRIANGLES;
  exports["TRIANGLE_STRIP"] = TRIANGLE_STRIP;
  exports["TRIANGLE_FAN"] = TRIANGLE_FAN;
  exports["DEPTH_BUFFER_BIT"] = DEPTH_BUFFER_BIT;
  exports["STENCIL_BUFFER_BIT"] = STENCIL_BUFFER_BIT;
  exports["COLOR_BUFFER_BIT"] = COLOR_BUFFER_BIT;
  exports["Shaders"] = Shaders;
  exports["clearColor"] = clearColor;
  exports["clear"] = clear;
  exports["enable"] = enable;
  exports["getCanvasHeight"] = getCanvasHeight;
  exports["getCanvasWidth"] = getCanvasWidth;
  exports["viewport"] = viewport;
  exports["drawArr"] = drawArr;
  exports["vertexPointer"] = vertexPointer;
  exports["bindBufAndSetVertexAttr"] = bindBufAndSetVertexAttr;
  exports["setUniformFloats"] = setUniformFloats;
  exports["makeBufferFloat"] = makeBufferFloat;
  exports["withShaders"] = withShaders;
  exports["runWebGL"] = runWebGL;
  exports["defContextAttributes"] = defContextAttributes;;
 
})(PS["Graphics.WebGL"] = PS["Graphics.WebGL"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Graphics_WebGL = PS["Graphics.WebGL"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Int = PS["Data.Int"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Matrix4 = PS["Data.Matrix4"];
  var Data_Vector3 = PS["Data.Vector3"];
  var Graphics_WebGLAll = PS["Graphics.WebGLAll"];
  var Prelude = PS["Prelude"];     
  var shaders = new Graphics_WebGL.Shaders("\n    precision mediump float;\n\n    void main(void) {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    ", "\n    attribute vec3 aVertexPosition;\n    uniform mat4 uMVMatrix;\n    uniform mat4 uPMatrix;\n\n    void main(void) {\n         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n    }\n    ");
  var main = Graphics_WebGL.runWebGL("glcanvas")(function (s) {
      return Control_Monad_Eff_Console.log(s);
  })(function (context) {
      return Graphics_WebGL.withShaders(shaders)(function (s) {
          return Control_Monad_Eff_Console.log(s);
      })(function (bindings) {
          return function __do() {
              Graphics_WebGL.clearColor(0.0)(0.0)(0.0)(1.0)();
              Graphics_WebGL.enable(Graphics_WebGL.DEPTH_TEST.value)();
              var _2 = Graphics_WebGL.getCanvasWidth(context)();
              var _1 = Graphics_WebGL.getCanvasHeight(context)();
              Graphics_WebGL.viewport(0)(0)(_2)(_1)();
              Graphics_WebGL.clear([ Graphics_WebGL.COLOR_BUFFER_BIT.value, Graphics_WebGL.DEPTH_BUFFER_BIT.value ])();
              var pMatrix = Data_Matrix4.makePerspective(45.0)(Data_Int.toNumber(_2) / Data_Int.toNumber(_1))(0.1)(100.0);
              Graphics_WebGL.setUniformFloats(bindings.uPMatrix)(Data_Matrix.toArray(pMatrix))();
              var mvMatrix = Data_Matrix4.translate(Data_Vector3.vec3(-1.5)(0.0)(-7.0))(Data_Matrix4.identity);
              Graphics_WebGL.setUniformFloats(bindings.uMVMatrix)(Data_Matrix.toArray(mvMatrix))();
              var _0 = Graphics_WebGL.makeBufferFloat([ 0.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0 ])();
              Graphics_WebGL.drawArr(Graphics_WebGL.TRIANGLES.value)(_0)(bindings.aVertexPosition)();
              return Control_Monad_Eff_Console.log("Done")();
          };
      });
  });
  exports["main"] = main;
  exports["shaders"] = shaders;;
 
})(PS["LudumDare"] = PS["LudumDare"] || {});
